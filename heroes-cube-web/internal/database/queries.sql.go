// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const addInventoryItem = `-- name: AddInventoryItem :execresult
INSERT INTO inventory (
        character_id,
        name,
        damage,
        price,
        class,
        quantity
    )
VALUES (?, ?, ?, ?, ?, ?)
`

type AddInventoryItemParams struct {
	CharacterID int64
	Name        string
	Damage      int64
	Price       int64
	Class       string
	Quantity    int64
}

func (q *Queries) AddInventoryItem(ctx context.Context, arg AddInventoryItemParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addInventoryItem,
		arg.CharacterID,
		arg.Name,
		arg.Damage,
		arg.Price,
		arg.Class,
		arg.Quantity,
	)
}

const createCharacter = `-- name: CreateCharacter :execresult
INSERT INTO characters (name, race, class, damage, level)
VALUES (?, ?, ?, ?, ?)
`

type CreateCharacterParams struct {
	Name   string
	Race   string
	Class  string
	Damage int64
	Level  int64
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCharacter,
		arg.Name,
		arg.Race,
		arg.Class,
		arg.Damage,
		arg.Level,
	)
}

const equipItem = `-- name: EquipItem :exec
INSERT INTO slots (character_id, slot, name, damage, price, class)
VALUES (?, ?, ?, ?, ?, ?) ON CONFLICT (character_id, slot) DO
UPDATE
SET name = excluded.name,
    damage = excluded.damage,
    price = excluded.price,
    class = excluded.class
`

type EquipItemParams struct {
	CharacterID int64
	Slot        string
	Name        string
	Damage      int64
	Price       int64
	Class       string
}

func (q *Queries) EquipItem(ctx context.Context, arg EquipItemParams) error {
	_, err := q.db.ExecContext(ctx, equipItem,
		arg.CharacterID,
		arg.Slot,
		arg.Name,
		arg.Damage,
		arg.Price,
		arg.Class,
	)
	return err
}

const getCharacter = `-- name: GetCharacter :one
SELECT id, name, race, class, damage, level
FROM characters
WHERE name = ?
LIMIT 1
`

func (q *Queries) GetCharacter(ctx context.Context, name string) (Character, error) {
	row := q.db.QueryRowContext(ctx, getCharacter, name)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Race,
		&i.Class,
		&i.Damage,
		&i.Level,
	)
	return i, err
}

const getInventory = `-- name: GetInventory :many
SELECT id, character_id, name, damage, price, class, quantity
FROM inventory
WHERE character_id = ?
`

func (q *Queries) GetInventory(ctx context.Context, characterID int64) ([]Inventory, error) {
	rows, err := q.db.QueryContext(ctx, getInventory, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Inventory
	for rows.Next() {
		var i Inventory
		if err := rows.Scan(
			&i.ID,
			&i.CharacterID,
			&i.Name,
			&i.Damage,
			&i.Price,
			&i.Class,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSlots = `-- name: GetSlots :many
SELECT character_id, slot, name, damage, price, class
FROM slots
WHERE character_id = ?
`

func (q *Queries) GetSlots(ctx context.Context, characterID int64) ([]Slot, error) {
	rows, err := q.db.QueryContext(ctx, getSlots, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Slot
	for rows.Next() {
		var i Slot
		if err := rows.Scan(
			&i.CharacterID,
			&i.Slot,
			&i.Name,
			&i.Damage,
			&i.Price,
			&i.Class,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unequipItem = `-- name: UnequipItem :exec
DELETE FROM slots
WHERE character_id = ?
    AND slot = ?
`

type UnequipItemParams struct {
	CharacterID int64
	Slot        string
}

func (q *Queries) UnequipItem(ctx context.Context, arg UnequipItemParams) error {
	_, err := q.db.ExecContext(ctx, unequipItem, arg.CharacterID, arg.Slot)
	return err
}

const updateInventoryItemQuantity = `-- name: UpdateInventoryItemQuantity :exec
UPDATE inventory
SET quantity = quantity + ?
WHERE id = ?
`

type UpdateInventoryItemQuantityParams struct {
	Quantity int64
	ID       int64
}

func (q *Queries) UpdateInventoryItemQuantity(ctx context.Context, arg UpdateInventoryItemQuantityParams) error {
	_, err := q.db.ExecContext(ctx, updateInventoryItemQuantity, arg.Quantity, arg.ID)
	return err
}
